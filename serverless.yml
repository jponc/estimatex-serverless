service: estimatex

variablesResolutionMode: 20210326

package:
  patterns:
    - '!./**'
    - './bin/**'

plugins:
  - serverless-domain-manager

provider:
  name: aws
  runtime: go1.x
  profile: julian
  memorySize: 128
  region: ap-southeast-2 # Sydney
  stage: ${opt:stage, 'staging'}
  lambdaHashingVersion: "20201221"
  apiGateway:
    shouldStartNameWithService: true
  tracing:
    apiGateway: true
    lambda: true

  iam:
    role:
      statements:
        # Only allow to a specific dynamo db table
        - Effect: Allow
          Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.tableName}*'
          Action:
            - "dynamodb:*"
        # Allow all SNS + Xray + ElasticSearch
        - Effect: "Allow"
          Resource: "*"
          Action:
            - sns:*
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords

functions:
  # == Authorizers ==
  Authoriser:
    handler: bin/Authoriser
    environment:
      JWT_SECRET: ${self:custom.env.JWT_SECRET}

  # == HTTP ==
  SayHello:
    handler: bin/SayHello
    events:
      - http:
          path: /hello
          method: post
          cors: true

  HostRoom:
    handler: bin/HostRoom
    events:
      - http:
          path: /HostRoom
          method: post
          cors: true
    environment:
      DB_TABLE_NAME: ${self:custom.env.DB_TABLE_NAME}
      JWT_SECRET: ${self:custom.env.JWT_SECRET}

  FindRoom:
    handler: bin/FindRoom
    events:
      - http:
          path: /FindRoom
          method: post
          cors: true
          authorizer:
            name: Authoriser
            resultTtlInSeconds: 0
    environment:
      DB_TABLE_NAME: ${self:custom.env.DB_TABLE_NAME}

  FindParticipants:
    handler: bin/FindParticipants
    events:
      - http:
          path: /FindParticipants
          method: post
          cors: true
          authorizer:
            name: Authoriser
            resultTtlInSeconds: 0
    environment:
      DB_TABLE_NAME: ${self:custom.env.DB_TABLE_NAME}

  JoinRoom:
    handler: bin/JoinRoom
    events:
      - http:
          path: /JoinRoom
          method: post
          cors: true
    environment:
      DB_TABLE_NAME: ${self:custom.env.DB_TABLE_NAME}
      JWT_SECRET: ${self:custom.env.JWT_SECRET}
      SNS_PREFIX: ${self:custom.env.SNS_PREFIX}

  CastVote:
    handler: bin/CastVote
    events:
      - http:
          path: /CastVote
          method: post
          cors: true
          authorizer:
            name: Authoriser
            resultTtlInSeconds: 0
    environment:
      DB_TABLE_NAME: ${self:custom.env.DB_TABLE_NAME}
      SNS_PREFIX: ${self:custom.env.SNS_PREFIX}

  ResetVotes:
    handler: bin/ResetVotes
    events:
      - http:
          path: /ResetVotes
          method: post
          cors: true
          authorizer:
            name: Authoriser
            resultTtlInSeconds: 0
    environment:
      DB_TABLE_NAME: ${self:custom.env.DB_TABLE_NAME}
      SNS_PREFIX: ${self:custom.env.SNS_PREFIX}

  RevealVotes:
    handler: bin/RevealVotes
    events:
      - http:
          path: /RevealVotes
          method: post
          cors: true
          authorizer:
            name: Authoriser
            resultTtlInSeconds: 0
    environment:
      SNS_PREFIX: ${self:custom.env.SNS_PREFIX}

  # == SNS ==
  PublishToPusherParticipantJoined:
    handler: bin/PublishToPusherParticipantJoined
    events:
      - sns: ${self:service}-${self:provider.stage}-ParticipantJoined
    environment:
      PUSHER_APP_ID: ${self:custom.env.PUSHER_APP_ID}
      PUSHER_KEY: ${self:custom.env.PUSHER_KEY}
      PUSHER_SECRET: ${self:custom.env.PUSHER_SECRET}
      PUSHER_CLUSTER: ${self:custom.env.PUSHER_CLUSTER}

  PublishToPusherParticipantVoted:
    handler: bin/PublishToPusherParticipantVoted
    events:
      - sns: ${self:service}-${self:provider.stage}-ParticipantVoted
    environment:
      PUSHER_APP_ID: ${self:custom.env.PUSHER_APP_ID}
      PUSHER_KEY: ${self:custom.env.PUSHER_KEY}
      PUSHER_SECRET: ${self:custom.env.PUSHER_SECRET}
      PUSHER_CLUSTER: ${self:custom.env.PUSHER_CLUSTER}

  PublishToPusherRevealVotes:
    handler: bin/PublishToPusherRevealVotes
    events:
      - sns: ${self:service}-${self:provider.stage}-RevealVotes
    environment:
      PUSHER_APP_ID: ${self:custom.env.PUSHER_APP_ID}
      PUSHER_KEY: ${self:custom.env.PUSHER_KEY}
      PUSHER_SECRET: ${self:custom.env.PUSHER_SECRET}
      PUSHER_CLUSTER: ${self:custom.env.PUSHER_CLUSTER}

  PublishToPusherResetVotes:
    handler: bin/PublishToPusherResetVotes
    events:
      - sns: ${self:service}-${self:provider.stage}-ResetVotes
    environment:
      PUSHER_APP_ID: ${self:custom.env.PUSHER_APP_ID}
      PUSHER_KEY: ${self:custom.env.PUSHER_KEY}
      PUSHER_SECRET: ${self:custom.env.PUSHER_SECRET}
      PUSHER_CLUSTER: ${self:custom.env.PUSHER_CLUSTER}

custom:
  tableName: ${self:service}-${self:provider.stage}
  customDomain:
    domainName: ${self:custom.${self:provider.stage}.domain}
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
  staging:
    domain: "api-staging.estimatex.io"
    region: "ap-southeast-2" # Sydney
  production:
    domain: "api.estimatex.io"
    region: "ap-southeast-2" # Sydney

  env:
    SNS_PREFIX: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${self:service}-${self:provider.stage}'
    DB_TABLE_NAME: ${self:custom.tableName}
    JWT_SECRET: ${ssm:/${self:service}/${self:provider.stage}/JWT_SECRET}
    PUSHER_APP_ID: ${ssm:/${self:service}/${self:provider.stage}/PUSHER_APP_ID}
    PUSHER_KEY: ${ssm:/${self:service}/${self:provider.stage}/PUSHER_KEY}
    PUSHER_SECRET: ${ssm:/${self:service}/${self:provider.stage}/PUSHER_SECRET}
    PUSHER_CLUSTER: ${ssm:/${self:service}/${self:provider.stage}/PUSHER_CLUSTER}

resources:
  Resources:
    Table:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
